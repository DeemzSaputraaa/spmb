name: Deploy Laravel to Debian Server

# Kapan workflow ini dijalankan
on:
  push:
    # Hanya jalankan jika ada push ke branch yang ditentukan di Secret atau branch 'main' jika Secret tidak ada
    branches:
      - ${{ secrets.DEPLOY_BRANCH || 'main' }}

jobs:
  deploy:
    name: Deploy to Server
    # Menggunakan runner Ubuntu terbaru yang disediakan GitHub
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout Kode: Mengunduh kode dari repositori ke runner
    - name: Checkout code
      uses: actions/checkout@v4 # Gunakan versi terbaru checkout action

    # 2. Setup SSH Agent: Mengkonfigurasi SSH Agent di runner dengan Private Key dari Secrets
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        # Mengambil private key dari GitHub Secrets
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 3. Add Server's Host Key to Known Hosts: Menghindari prompt konfirmasi SSH interaktif
    - name: Add Known Hosts
      run: |
        mkdir -p ~/.ssh
        # Mengambil host key server dan menambahkannya ke known_hosts runner
        # Gunakan secret SSH_PORT jika ada, default ke 22
        ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    # 4. Execute Deployment Commands: Menjalankan perintah di server Debian via SSH
    - name: Execute deployment commands on server
      # Mendefinisikan variabel lingkungan untuk kemudahan
      env:
        SSH_USER_HOST: "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
        PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
        TARGET_BRANCH: ${{ secrets.DEPLOY_BRANCH || 'main' }} # Gunakan branch dari secret atau 'main'
        SSH_PORT_PARAM: "-p ${{ secrets.SSH_PORT || '22' }}" # Parameter port untuk ssh
      run: |
        # Menjalankan blok perintah di server remote menggunakan SSH
        # Perhatikan penggunaan << 'EOF' untuk multi-line script
        ssh $SSH_PORT_PARAM $SSH_USER_HOST << EOF
          echo "--------------------------------------------------"
          echo "Starting deployment on $(date)"
          echo "Target Branch: $TARGET_BRANCH"
          echo "Project Path: $PROJECT_PATH"
          echo "--------------------------------------------------"

          # Pindah ke direktori proyek, keluar jika gagal
          cd \$PROJECT_PATH || { echo "ERROR: Failed to change directory to $PROJECT_PATH"; exit 1; }

          echo "INFO: Current directory: \$(pwd)"
          echo "INFO: Stashing local changes (if any)..."
          git stash || true # Stash perubahan lokal, abaikan jika tidak ada apa-apa

          echo "INFO: Checking out target branch ($TARGET_BRANCH)..."
          git checkout \$TARGET_BRANCH || { echo "ERROR: Failed to checkout branch $TARGET_BRANCH"; git stash pop || true; exit 1; }

          echo "INFO: Pulling latest code from origin/$TARGET_BRANCH..."
          git pull origin \$TARGET_BRANCH || { echo "ERROR: Failed to pull from origin/$TARGET_BRANCH"; git stash pop || true; exit 1; }

          # Terapkan kembali stash jika ada (misal file .env yang tidak di-track)
          # Hati-hati, ini bisa menyebabkan konflik jika file yang sama diubah di repo & stash
          echo "INFO: Applying stash (if any)..."
          git stash pop || true

          echo "INFO: Installing/updating Composer dependencies..."
          # Gunakan --profile untuk melihat waktu & memori jika perlu debug
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev || { echo "ERROR: Composer install failed"; exit 1; }

          echo "INFO: Running database migrations..."
          php artisan migrate --force || { echo "ERROR: Database migration failed"; exit 1; }

          echo "INFO: Clearing caches..."
          php artisan cache:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Tambahkan perintah lain jika perlu (misal: build asset frontend, restart queue)
          # echo "INFO: Building frontend assets..."
          # npm install && npm run build

          # echo "INFO: Restarting queue worker..."
          # php artisan queue:restart # Mungkin perlu sudo, lihat catatan di bawah

          echo "--------------------------------------------------"
          echo "Deployment finished successfully on $(date)"
          echo "--------------------------------------------------"
        EOF

    # 5. Cleanup SSH Agent (Opsional, biasanya otomatis)
    - name: Cleanup SSH Agent
      # Selalu jalankan langkah ini, bahkan jika langkah sebelumnya gagal
      if: always()
      run: echo "SSH Agent cleanup (usually automatic by the action)"
